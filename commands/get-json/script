#!/usr/bin/env bash

# To implement this command, edit the "Command implementation" section below. 

# Usage
# -----

# Comments prefixed with `#/` are managed by stubbs.
# The `command` and `usage` comments describe the command
# and show its options.
# 
#/ command: docker-container-model-source:get-json: "get the nodes as yaml"
#/ usage: rerun docker-container-model-source:get-json  --docker-host <${DOCKER_HOST:-}>  --docker-tls-verify <${DOCKER_TLS_VERIFY:-}>  --docker-cert-path <${DOCKER_CERT_PATH:-}> [ --docker-machine-name <>] 

# Load common functions
# ---------------------

# Load the function library for this module.
# This loads rerun functions, too.
. $RERUN_MODULE_DIR/lib/functions.sh get-json || { 
  echo >&2 "Failed loading function library." ; exit 1 ; 
}

# Error handling
# ---------------

# This script is designed to _fail-fast_.

# Trap errors and exit. The call to `rerun_die` will print the
# the error message and exit with the error command exit status. 

trap 'rerun_die $? "*** command failed: docker-container-model-source:get-json. ***"' ERR
trap 'echo $? "*** command failed: docker-container-model-source:get-json. ***"' ERR

# Run [set] `nounset` to treat unset variables as errors. Set [pipefail]
# so a pipeline return status is the value of the last 
# (rightmost) command to exit with non-zero status.
#
# [set]: http://ss64.com/bash/set.html
# [pipefail]: http://www.gnu.org/software/bash/manual/html_node/Pipelines.html

set -o nounset -o pipefail

# Command variables
# -----------------

# This command script can access the following variables
# declared by `rerun` or by the option parser function.

#/ rerun-variables: RERUN, RERUN_VERSION, RERUN_MODULES, RERUN_MODULE_DIR
#/ option-variables: DOCKER_HOST DOCKER_TLS_VERIFY DOCKER_CERT_PATH DOCKER_MACHINE_NAME

# The `rerun_options_parse` function processes the command line
# arguments. Each accepted command line flag results in setting 
# one the corresponding option variables.

rerun_options_parse "$@"


# Command implementation
# ----------------------
jsq() {
    local container=$1
    local key=$2
    cat $TMP_DIR/$container.json | jq --raw-output ".[0] | $key"
}

TMP_DIR=$(mktemp -d "/tmp/docker-container-model-source:get-json.XXXX")
JSON_OUT=${TMP_DIR}/resource.json
# ui:color=color, ui:bgcolor=color, ui:icon:name=glyphicon-whatever, ui:icon:color/bgcolor
# also ui:badges=glyphicon-a,glyphicon-b to add badges to the node
UI_COLOR=
UI_ICON=glyphicon-gift

# list the nodes
docker ps -a       |
# skip the header line
sed -n '1!p'       |
# list just the container name
cut -f1 -d" " > $TMP_DIR/docker.ps.out

IFS=$'\r\n'
CONTAINERS=( $(< $TMP_DIR/docker.ps.out) )

(
echo '{'
i=0
for container in ${CONTAINERS[*]:-}
do
    (( i++ ))

    docker inspect $container > $TMP_DIR/$container.json

    status=
    nodename=$(jsq $container .Name |tr -d '"')
    is_paused=$(jsq $container .State.Paused)
    is_running=$(jsq $container .State.Running)
    UI_ICON_COLOR=

    if [[ $is_running == false && $is_paused == false ]]
    then
        status=
        UI_BADGES=(glyphicon-off)
    elif [[ $is_running == true && $is_paused == false ]]
    then
        status=running
        UI_BADGES=(glyphicon-thumbs-up)
        UI_ICON_COLOR=green    
    elif [[ $is_paused == true ]]
    then
        status=paused
        UI_ICON_COLOR=orange        
        UI_BADGES=(glyphicon-pause) 
    else
        UI_BADGES=()
    fi

    echo "\"/${DOCKER_MACHINE_NAME:-}/${nodename#/}\": {"
    echo "\"tags\": \"container,${status:-}\"", 

    cat <<-EOF
        "Name": "$(jsq $container .Name)",
        "Running": "$(jsq $container .State.Running)",
        "Paused": "$(jsq $container .State.Paused)",
        "Dead": "$(jsq $container .State.Dead)",
        "ExitCode": "$(jsq $container .State.ExitCode)",
        "Created": "$(jsq $container .Created)",
        "Image": "$(jsq $container .Config.Image)",
        "containerId": "$(jsq $container .Id)",
        "IPAddress": "$(jsq $container .NetworkSettings.IPAddress)",
        "hostname": "$(jsq $container .Config.Hostname)",
        "username": "$(jsq $container .Config.User)",
        "Cmd": "$(jsq $container '.Config.Cmd|join(" ")')",
        "docker-host": "$DOCKER_HOST",
        "docker-cert-path": "$DOCKER_CERT_PATH",
        "docker-tls-verify": "$DOCKER_TLS_VERIFY",
        "docker-machine-name": "${DOCKER_MACHINE_NAME:-}",
        "node-executor": "docker-container-node-executor",
        "ui:icon:name": "$UI_ICON",
        "ui:icon:color": "${UI_ICON_COLOR:-}",
        "ui:badges": "${UI_BADGES[*]:-}"
EOF
    (( $i < ${#CONTAINERS[*]} )) && echo "}," || echo "}"
done

echo '}'

) > $JSON_OUT

cat $JSON_OUT

# Done. Exit with last command exit status.
exit $?

